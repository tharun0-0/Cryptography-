# DES Decryption Algorithm

def permute(block, table):
    return ''.join(block[i - 1] for i in table)

def left_shift(key, shifts):
    return key[shifts:] + key[:shifts]

def generate_keys(key):
    key = permute(key, PC1)
    C, D = key[:28], key[28:]
    keys = []
    for i in range(16):
        C = left_shift(C, shifts[i])
        D = left_shift(D, shifts[i])
        keys.append(permute(C + D, PC2))
    return keys[::-1]

def feistel_function(right, key):
    right = permute(right, E)
    right = xor(right, key)
    right = apply_s_boxes(right)
    return permute(right, P)

def des_decrypt(ciphertext, key):
    keys = generate_keys(key)
    block = permute(ciphertext, IP)
    left, right = block[:32], block[32:]
    for i in range(16):
        temp = right
        right = xor(left, feistel_function(right, keys[i]))
        left = temp
    return permute(right + left, IP_INV)

PC1 = [57, 49, 41, 33, 25, 17, 9, 1, 58, 50, 42, 34, 26, 18, 10, 2, 59, 51, 43, 35, 62, 54, 46, 38, 30, 22, 14, 6, 61, 53, 45, 37, 29, 21, 13, 5, 60, 52, 44, 36, 28, 20, 12, 4, 27, 19, 11, 3]
PC2 = [14, 17, 11, 24, 1, 5, 3, 28, 15, 6, 21, 10, 23, 19, 12, 4, 26, 8, 16, 7, 27, 20, 13, 2, 41, 50, 29, 40, 51, 30, 36, 46, 54, 53, 33, 49, 45, 32, 48, 39, 44, 38, 43, 31, 35, 22, 26, 25]
E = [32, 1, 2, 3, 4, 5, 4, 5, 6, 7, 8, 9, 8, 9, 10, 11, 12, 13, 12, 13, 14, 15, 16, 17, 16, 17, 18, 19, 20, 21, 20, 21, 22, 23, 24, 25, 24, 25, 26, 27, 28, 29, 28, 29, 30, 31, 32, 1]
P = [16, 7, 20, 21, 29, 12, 28, 17, 1, 15, 23, 26, 5, 18, 31, 10, 2, 8, 24, 14, 32, 27, 3, 9, 19, 13, 30, 6, 22, 11, 4, 25]
IP = [58, 50, 42, 34, 26, 18, 10, 2, 60, 52, 44, 36, 28, 20, 12, 4, 62, 54, 46, 38, 30, 22, 14, 6, 64, 56, 48, 40, 32, 24, 16, 8, 57, 49, 41, 33, 25, 17, 9, 1, 59, 51, 43, 35, 27, 19, 11, 3, 63, 55, 47, 39, 31, 23, 15, 7]
IP_INV = [40, 8, 48, 16, 56, 24, 32, 0, 39, 7, 47, 15, 55, 23, 31, 63, 38, 6, 46, 14, 54, 22, 30, 62, 37, 5, 45, 13, 53, 21, 29, 61, 36, 4, 44, 12, 52, 20, 28, 60, 35, 3, 43, 11, 51, 19, 27, 59, 34, 2, 42, 10, 50, 18, 26, 58, 33, 1, 41, 9, 49, 17, 25, 57]
shifts = [1, 1, 2, 2, 2, 2, 1, 2, 2, 2, 2, 1, 2, 2, 2, 1]

def xor(bits1, bits2):
    return ''.join('1' if b1 != b2 else '0' for b1, b2 in zip(bits1, bits2))

def apply_s_boxes(bits):
    # S-boxes implementation goes here
    pass
