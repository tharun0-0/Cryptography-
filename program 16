# Hill Cipher Implementation in Python

def matrix_multiply(A, B):
    return [[sum(a * b for a, b in zip(A_row, B_col)) % 26 for B_col in zip(*B)] for A_row in A]

def matrix_inverse(matrix):
    det = int(round(matrix[0][0] * matrix[1][1] - matrix[0][1] * matrix[1][0])) % 26
    det_inv = pow(det, -1, 26)
    adjugate = [[matrix[1][1], -matrix[0][1]], [-matrix[1][0], matrix[0][0]]]
    return [[(det_inv * adj) % 26 for adj in row] for row in adjugate]

def hill_encrypt(plaintext, key):
    key_matrix = [[key[i][j] for j in range(len(key))] for i in range(len(key))]
    plaintext_matrix = [[ord(char) - ord('A') for char in plaintext]]
    encrypted_matrix = matrix_multiply(plaintext_matrix, key_matrix)
    return ''.join(chr(num + ord('A')) for num in encrypted_matrix[0])

def hill_decrypt(ciphertext, key):
    key_matrix = [[key[i][j] for j in range(len(key))] for i in range(len(key))]
    inverse_key_matrix = matrix_inverse(key_matrix)
    ciphertext_matrix = [[ord(char) - ord('A') for char in ciphertext]]
    decrypted_matrix = matrix_multiply(ciphertext_matrix, inverse_key_matrix)
    return ''.join(chr(num + ord('A')) for num in decrypted_matrix[0])

key = [[6, 24, 1], [13, 16, 10], [20, 17, 15]]
plaintext = "ACT"
ciphertext = hill_encrypt(plaintext, key)
decrypted_text = hill_decrypt(ciphertext, key)

print("Ciphertext:", ciphertext)
print("Decrypted Text:", decrypted_text)
