def left_shift(bits, shifts):
    return bits[shifts:] + bits[:shifts]

def generate_subkeys(key):
    # Convert key string to list of bits
    key_bits = [int(bit) for bit in key]
    
    # Permutation choice 1 (PC1): 64 -> 56 bits
    pc1 = [57, 49, 41, 33, 25, 17, 9,
           1, 58, 50, 42, 34, 26, 18,
           10, 2, 59, 51, 43, 35, 27,
           19, 11, 3, 60, 52, 44, 36,
           63, 55, 47, 39, 31, 23, 15,
           7, 62, 54, 46, 38, 30, 22,
           14, 6, 61, 53, 45, 37, 29,
           21, 13, 5, 28, 20, 12, 4]
    
    # Permutation choice 2 (PC2): 48 bits
    pc2 = [14, 17, 11, 24, 1, 5,
           3, 28, 15, 6, 21, 10,
           23, 19, 12, 4, 26, 8,
           16, 7, 27, 20, 13, 2,
           41, 52, 31, 37, 47, 55,
           30, 40, 51, 45, 33, 48,
           44, 49, 39, 56, 34, 53,
           46, 42, 50, 36, 29, 32]
    
    # Apply PC1
    key_permuted = [key_bits[i - 1] for i in pc1]
    c = key_permuted[:28]
    d = key_permuted[28:]
    
    subkeys = []
    shifts = [1, 1, 2, 2, 2, 2, 2, 1]
    
    for shift in shifts:
        c = left_shift(c, shift)
        d = left_shift(d, shift)
        combined = c + d
        # Apply PC2 to combined to get subkey
        subkey = [combined[i - 1] for i in pc2]
        subkeys.append(subkey)
    
    return subkeys

initial_key = "1010101010111011000011110000111100001111000011110000111100001111"
subkeys = generate_subkeys(initial_key)
for i, subkey in enumerate(subkeys):
    print(f"Subkey {i + 1}: {''.join(map(str, subkey))}")
