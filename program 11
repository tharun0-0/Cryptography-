def create_playfair_matrix(key):
    key = key.upper().replace('J', 'I')
    key = ''.join(sorted(set(key), key=key.index))
    alphabet = 'ABCDEFGHIKLMNOPQRSTUVWXYZ'
    matrix = []

    for char in key:
        if char in alphabet:
            matrix.append(char)
            alphabet = alphabet.replace(char, '')
    matrix += list(alphabet)
    return [matrix[i:i+5] for i in range(0, 25, 5)]

def find_position(char, matrix):
    for i, row in enumerate(matrix):
        if char in row:
            return i, row.index(char)
    return None

def encrypt_digraph(digraph, matrix):
    row1, col1 = find_position(digraph[0], matrix)
    row2, col2 = find_position(digraph[1], matrix)
    if row1 == row2:
        return matrix[row1][(col1 + 1) % 5] + matrix[row2][(col2 + 1) % 5]
    elif col1 == col2:
        return matrix[(row1 + 1) % 5][col1] + matrix[(row2 + 1) % 5][col2]
    else:
        return matrix[row1][col2] + matrix[row2][col1]

def preprocess_plaintext(plaintext):
    plaintext = plaintext.upper().replace('J', 'I').replace(' ', '')
    result = ''
    i = 0
    while i < len(plaintext):
        letter1 = plaintext[i]
        if i + 1 < len(plaintext):
            letter2 = plaintext[i+1]
            if letter1 == letter2:
                result += letter1 + 'X'
                i += 1
            else:
                result += letter1 + letter2
                i += 2
        else:
            result += letter1 + 'X'
            i += 1
    return result

def playfair_encrypt(plaintext, key):
    matrix = create_playfair_matrix(key)
    plaintext = preprocess_plaintext(plaintext)
    ciphertext = ''
    for i in range(0, len(plaintext), 2):
        digraph = plaintext[i:i+2]
        ciphertext += encrypt_digraph(digraph, matrix)
    return ciphertext

key = "PT109"
plaintext = "KXJEYUREBEZWEHEWRYTUHEYFSKREHEGOYFIWTTTUOLKSYCAJPOBOTEIZONTXBYBNTGONEYCUZWRGDSONSXBOUYWRHEBAAHYUSEDQ"
ciphertext = playfair_encrypt(plaintext, key)
print(ciphertext)
